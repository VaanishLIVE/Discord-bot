import discord
import time
import config
from discord.ext import commands


class Everyone(commands.Cog):
   def __init__(self, bot):
      self.bot = bot

   @commands.Cog.listener()
   async def on_ready(self):
      print('everyone is ready')

   @commands.command()
   async def info(self, ctx):
      embed = discord.Embed(title=f">>     Команды     <<",  color=0x9370DB)
      embed.set_author(name=f"{ctx.author}", icon_url=f"{ctx.author.avatar_url}")

      embed.add_field(name=f"***{config.prefix}mute*** --- отключить возможность говорить и писать человеку", value=f"Пример: {config.prefix}mute @1234", inline=False)
      embed.add_field(name=f"***{config.prefix}unmute*** --- вернуть все возможности человку", value=f"Пример: {config.prefix}unmute @1234", inline=False)
      embed.add_field(name=f"***{config.prefix}ban*** --- добавить человека в черный список и выгнать", value=f"Пример: {config.prefix}ban @1234", inline=False)
      embed.add_field(name=f"***{config.prefix}unban*** --- убрать человека из чероного списка", value=f"Пример: {config.prefix}unban @1234", inline=False)
      embed.add_field(name=f"***{config.prefix}kick*** --- выгрнать человека", value=f"Пример: {config.prefix}kick @1234", inline=False)
      embed.add_field(name=f"***{config.prefix}clear*** --- удалить последние сообщения", value=f"Пример: {config.prefix}clear 40", inline=False)

      embed.set_footer(text=f"BOT • {time.asctime()}")
      await ctx.channel.purge(limit=1)
      await ctx.send(embed=embed)


async def setup(bot):
   await bot.add_cog(Everyone(bot))


В этом файле будут храниться все команды доступные обычному пользователю. Импорты отдельно разбирать не буду, там и так все понятно.

Вероятно, вы спросите что это за класс. Everyone наследуется от commands.Cog. Винтики работают за счёт объектов - когда мы запускаем бота, то перебираем все объекты и собираем всё вместе. 

Для отслеживания команд мы используем декоратор commands.command(). Для корректной работы при создании класса мы передаём в него нашего бота. Дальше описываем в методах логику.

Функция info будет высылать пользователю embed (сообщение) с указанием доступных команд. Внутрь функции передаем ctx (полное его название context) - это полученное сообщение. 

Мы создаем объект, в который передаем: заголовок, свет линии с краю, подпись автора и ссылку на изображение. Дальше, обращаясь к методу add_field, добавляем строки с именем и значением - можно их назвать заголовок и текст. 

Метод set_footer добавляет маленькую подпись в конце сообщения. В завершение мы обращаемся к await ctx.channel.purge(limit=1), что удаляет одно сообщение (можно указать любое количество в limit). Await позволяет нам дождаться окончания асинхронного метода. 

После этого отправляем сообщение с помощью await ctx.send(embed=embed), передавая внутрь сформированное сообщение. Или можно просто отправить текст await ctx.send(text=”your message”).

Эта конструкция нужна библиотеке, что бы она могла увидеть и загрузить винтик:

async def setup(bot):
   await bot.add_cog(Everyone(bot))

